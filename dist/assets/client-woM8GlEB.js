const d=()=>{if(window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1")return"http://localhost:5000/api";if(window.location.hostname.includes("ondigitalocean.app")||window.location.hostname.includes("netlify.app")||window.location.hostname.includes("vercel.app")){const o=`${window.location.origin}/api`;return console.log("üåê Using fullstack API URL (same domain):",o),o}return"http://localhost:5000/api"},l=d();console.log("üîß Final API Configuration:",{API_BASE_URL:l,currentOrigin:window.location.origin,currentHostname:window.location.hostname,env:"production"});class h{constructor(e=l){this.baseURL=e}async request(e,s={}){const n=`${this.baseURL}${e}`;console.log("üåê API Request:",{url:n,method:s.method||"GET",baseURL:this.baseURL});const r={headers:{"Content-Type":"application/json",...s.headers},...s};r.body&&typeof r.body=="object"&&(r.body=JSON.stringify(r.body));try{const t=await fetch(n,r);console.log("üì° API Response:",{status:t.status,statusText:t.statusText,url:t.url,contentType:t.headers.get("content-type")});const i=t.headers.get("content-type");if(i&&i.includes("text/html"))throw console.error("üö® BACKEND NOT DEPLOYED: Received HTML instead of JSON"),new Error("Backend API not deployed. Please deploy the backend service first.");const a=await t.json();if(!t.ok)throw console.error("‚ùå API Error Response:",a),new Error(a.error||a.message||`HTTP error! status: ${t.status}`);return console.log("‚úÖ API Success:",a),a}catch(t){throw console.error("üí• API request failed:",{error:t.message,url:n,endpoint:e,baseURL:this.baseURL}),t.message.includes("Backend API not deployed")?new Error("Backend service is not deployed yet. Please deploy the backend first."):t.message.includes("fetch")?new Error("Cannot connect to backend API. Please check if the backend is running."):t}}async get(e,s={}){return this.request(e,{method:"GET",...s})}async post(e,s,n={}){return this.request(e,{method:"POST",body:s,...n})}async put(e,s,n={}){return this.request(e,{method:"PUT",body:s,...n})}async delete(e,s={}){return this.request(e,{method:"DELETE",...s})}}const c=new h,u={async createMessage(o){return c.post("/messages",o)},async searchMessages(o){return c.get(`/messages/search/${encodeURIComponent(o)}`)},async readMessage(o,e=null){return c.post(`/messages/read/${o}`,{password:e})},async getStats(){return c.get("/messages/stats")},async healthCheck(){return c.get("/health")}};export{c as default,u as messageAPI};
